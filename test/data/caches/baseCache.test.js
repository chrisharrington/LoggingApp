var assert = require("assert"),
	sinon = require("sinon"),
	Promise = require("bluebird");
require("../../setup");

var sut = require("../../../data/caches/baseCache");

describe("baseCache", function() {
	describe("init", function () {
		it("should call repository.get", function() {
			sut.repository = { get: sinon.stub().resolves([]) };

			return sut.init().then(function() {
				assert(sut.repository.get.calledOnce);
			});
		});

		it("should set promise after init", function() {
			sut.repository = { get: sinon.stub().resolves([]) };

			return sut.init().then(function() {
				assert(sut.promise);
			});
		});
	});

	describe("all", function() {
		it("return promise generated by init", function() {
			sut.promise = "the promise generated by init";

			assert.equal(sut.promise, sut.all());
		});
	});

	describe("details", function() {
		it("should return single object found by matching ids", function() {
			sut.promise = Promise.resolve([
				{ id: 1, name: "first" },
				{ id: 2, name: "second" }
			]);

			return sut.details(2).then(function(object) {
				assert.equal(object.name, "second");
			});
		});
	});

	describe("dict", function() {
		it("should return all objects keyed by id", function() {
			sut.promise = Promise.resolve([
				{ id: 1, name: "first" },
				{ id: 2, name: "second" }
			]);

			return sut.dict().then(function(dict) {
				assert.equal(dict[1].name, "first");
				assert.equal(dict[2].name, "second");
			});
		});

		it("should return all objects keyed by given key function", function() {
			sut.promise = Promise.resolve([
				{ id: 1, name: "first" },
				{ id: 2, name: "second" }
			]);

			return sut.dict(function(x) { return x.name; }).then(function(dict) {
				assert.equal(dict["first"].name, "first");
				assert.equal(dict["second"].name, "second");
			});
		});
	});

	describe("invalidate", function() {
		it("should call init", function() {
			var original = sut.init;

			sut.init = sinon.stub();
			sut.invalidate();

			assert(sut.init.calledWith());

			sut.init = original;
		});
	});
});